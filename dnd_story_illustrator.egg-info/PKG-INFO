Metadata-Version: 2.4
Name: dnd-story-illustrator
Version: 0.1.0
Summary: DnD Story Illustrator: characters, scenes, and session montages with OpenAI
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: streamlit>=1.36.0
Requires-Dist: openai>=1.40.0
Requires-Dist: pillow<10.0.0
Requires-Dist: reportlab>=4.2.0
Requires-Dist: python-dotenv>=1.0.1
Requires-Dist: requests>=2.32.0
Requires-Dist: moviepy>=1.0.3

## DnD Story Illustrator

Python app to create characters, illustrate scenes, and export end-of-session montages for tabletop RPG campaigns.

### Features
- Character setup with text and optional reference image
- Scene illustration via OpenAI Images with consistent character prompts
- AI captions and optional session recap
- Campaign management with character linking and chapters
- Montage export to PDF

### Tech
- Python 3.10+
- Streamlit UI
- OpenAI Chat + Images
- ReportLab for PDF

### Setup (uv-first)
Using uv (fast Python toolchain manager and package manager):

```bash
# 1) Install uv (if not installed)
curl -LsSf https://astral.sh/uv/install.sh | sh

# 2) Initialize PATH in current shell (Bash/WSL)
source "$HOME/.local/bin/env"

# 3) Create and activate a project virtual environment
uv venv .venv
source .venv/bin/activate

# 4) Install project dependencies defined in pyproject.toml
uv sync

# Optional: add new dependencies later
# Example: uv add <package>
uv add streamlit openai pillow reportlab python-dotenv requests
```

If you prefer to install the project in editable mode:
```bash
uv pip install -e .
```

### OpenAI API key
The app loads environment variables from a local `.env` automatically at startup.
Create a `.env` file in the project root with:
```dotenv
OPENAI_API_KEY=YOUR_KEY_HERE
```

Alternatively, set the variable in your shell before launch.

Bash/WSL:
```bash
export OPENAI_API_KEY="YOUR_KEY_HERE"
```

PowerShell:
```powershell
$env:OPENAI_API_KEY = "YOUR_KEY_HERE"
```

### Run
From the project root, with the uv-managed venv activated:
```bash
streamlit run app/main.py
```

Or without activating the venv, using uvx:
```bash
uvx --from streamlit streamlit run app/main.py
```

Open the local URL printed by Streamlit.

### Usage Outline
1. Characters tab: create characters; optionally expand description with AI.
2. Campaigns tab: create a campaign and add characters to it.
3. Scenes tab: enter a scene prompt, select involved characters, generate illustration + caption.
4. Montage tab: export PDF montage and optionally generate a text recap.

### Notes
- Data is stored as JSON under `data/`. Images are saved under `data/images/`.
- This app uses `gpt-4o-mini` for text and `gpt-image-1` for images. You can change models in `services/openai_service.py`.
- If image generation fails, verify your OpenAI account has image access and sufficient quota.


